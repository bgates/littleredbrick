require 'test_helper'

class Gradebook::GradebookControllerTest < ActionController::TestCase

  def setup
    @request.session[:school] = 1
    @request.session[:user] = 1
    @controller.expects(:current_user).at_least_once.returns(@teacher = Teacher.new)
    sections = [Section.new]
    @teacher.stubs(:sections).returns(sections)
    sections.stubs(:find_by_id).returns(@section = Section.new)
  end

  def test_prevent_unauthorized_entry
    @controller.expects(:authorized?).returns(false)
    get :show, :section_id => @section
    assert_redirected_to login_path
  end

  def test_empty_gradebook
    get :show, :section_id => 'empty'
    assert_equal [], assigns(:students)
    assert_template('show')
    assert_select 'img[alt="Remove Student"]', 0
  end
  
  def test_show
    @section.assignments.stubs(:find).returns([Assignment.new(:date_due => Date.today, :position => 1, :reported_grade_id => 1), Assignment.new(:date_due => Date.today + 5, :position => 2, :reported_grade_id => 2)])
    get :show
    assert_template('show')
  end

  def test_show_with_errors
    get :show, {}, {}, {:bad_grades => [3,4,5]}
  end
  
  def test_post_no_errors
    post :update, :section_id => @section, :grade => {}, :method => :put
    assert_select 'div[id = "errorExplanation"]', 0
    assert flash[:error]
  end

  def test_post_all_valid
    Gradebook.expects(:new).returns(@gradebook = stub(:assignments => [], :start => 0, :all_valid? => true, :month_and_year => [Date.today.year, Date.today.mon]))
    post :update, :section_id => @section, :grade => 'valid', :method => :put
    assert flash[:notice]
    assert_redirected_to gradebook_path(@section)
  end

  def test_post_some_invalid
    assignment = [stub(:position => 1, :date_due => Date.today, :point_value => 10, :title => 'param', :id => 1)]
    @gradebook = stub(:assignments => assignment, :start => 0, :all_valid? => false, :grades => [], :set_milestones => [], :set_range => [], :set_grades => [], :month_and_year => [Date.today.year, Date.today.mon])
    #@gradebook.
    Gradebook.expects(:new).returns(@gradebook)
    @section.expects(:rollbook_entries).returns([])
    post :update, :section_id => 'section', :grade => 'invalid', :method => :put
    assert_select 'h2', 'Bad News'
    assert_template('show')
  end

  def test_upload_possible
    @section.expects(:assignments).returns(stub(:size => 1))
    get :select_file, :section_id => 1
    assert_template('select_file')
  end

  def test_upload_impossible
    @section.expects(:assignments).returns(stub(:size => 0))
    get :select_file, :section_id => 1
    assert_template('select_file')
    assert_select 'form', 0
    assert_select 'p', :text => /You cannot/
  end

  def test_upload_non_excel_fails
    Upload.expects(:create).returns(@upload = Upload.new)
    post :upload, :section_id => 1, :Filedata => fixture_file_upload('upload/not_a_csv_file.doc', 'application/msword')
    assert_template('select_file')
    assert_select 'div#errorExplanation'
  end

  def test_upload_good_file
    Upload.expects(:create).returns(@upload = Upload.new)
    @upload.expects(:valid?).returns(true)
    @upload.expects(:extension).returns('.xls')
    post :upload, :section_id => 1, :Filedata => fixture_file_upload('upload/good.xls', 'application/vnd.ms-excel')
    assert_redirected_to :action => 'describe_file', :section_id => 1
    assert flash[:notice]
  end

  def test_upload_good_file_2
    Upload.expects(:open).returns(stub(:valid? => true, :data => [[1]], :errors => [], :extension => '.ods'))
    @section.expects(:assignments).returns(stub(:find => [Assignment.new(:date_due => Date.today)]))
    get :describe_file, :section_id => 1
    assert_template('describe_file')
  end

  def test_update_fails
    @upload = Upload.new
    @upload.expects(:valid?).returns(false)
    @upload.expects(:extension).returns('.xlsx')
    GradeUpload.expects(:open).returns(@upload)
    @upload.expects(:prepare_grades).returns('fail msg')
    @upload.stubs(:data).returns([[]])
    @controller.expects(:set_assignments).returns([stub(:position => 2)])
    post :import_grades, :section_id => 1
    assert_template('describe_file')
  end

  def test_upload_not_all_valid
    prep_upload(false)
    assert flash[:error]
  end

  def test_upload_all_valid
    prep_upload(true)
    assert flash[:notice]
  end

  def test_import_with_notice_of_missing_students
    @upload = mock(:valid? => true)
    GradeUpload.expects(:open).returns(@upload)
    @upload.expects(:prepare_grades).returns([])
    @upload.expects(:update_all).returns([stub(:valid? => true, :id => 'id')])
    @section.stubs(:rollbook_entries).returns([stub(:id => 1, :student => mock(:full_name => 'test name')), stub(:id => 2)])
    @upload.expects(:collect_students).returns([2]) 
    @section.expects(:to_param).returns(1)
    post :import_grades, :section_id => 1
    assert_redirected_to gradebook_path(:section_id => 1)
  end
  
  protected
  def prep_upload(response)
    @upload = mock(:valid? => true)
    GradeUpload.expects(:open).returns(@upload)
    @upload.expects(:prepare_grades).returns([])
    @upload.expects(:update_all).returns([stub(:valid? => response, :id => 'id')])
    @upload.expects(:collect_students).returns([]) if response
    @section.expects(:to_param).returns(1)
    post :import_grades, :section_id => 1
    assert_redirected_to gradebook_path(:section_id => 1)
  end
end
