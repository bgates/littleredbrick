require 'test_helper'

class Gradebook::AttendanceControllerTest < ActionController::TestCase
    
  def setup
    generic_setup Teacher
    Section.expects(:find).returns(@section = Section.new)
    @section.expects(:teacher).at_least_once.returns(@user)
    School.stubs(:find).returns @school = School.new
  end

  def test_show
    rbe = @section.rollbook_entries.expects(:detect).returns(mock(:student => (@student = Student.new), :absences => (@absences = [Absence.new])))
    @sections = [stub(:track => stub(:start => Date.today - 10, :finish => Date.today + 10))]
    @student.stubs(:sections).returns(@sections)
    get :show
    assert_template('show')
  end

  def test_edit
    get :edit
    assert_response :success
  end

  def test_update
    @to_update = Absence.new(:rollbook_entry_id => 1)
    @to_destroy = Absence.new(:rollbook_entry_id => 2)
    @absences = stub(:find_all_by_date => [@to_update, @to_destroy], :create => true)
    @section.stubs(:absences).returns(@absences)
    @section.stubs(:rollbook_entries).returns([stub(:id => 1, :student_id => 100, :position => 1), stub(:id => 2, :student_id => 200, :position => 2), stub(:id => 3, :student_id => 404, :position => 404)])
    @to_update.expects(:update_attribute).returns(true)
    @to_destroy.expects(:destroy)
    post :update, :date => Date.today.to_s, :absence => {1 => '0', 3 => '5'}, :method => :put
    assert_redirected_to attendance_path(@section, Date.today)
  end

  protected
  def stub_seats
    @section.stubs(:rollbook_entries).returns([RollbookEntry.new(:x => 1, :y => 1), RollbookEntry.new(:x => 1, :y => 2)])
    RollbookEntry.any_instance.stubs(:student).returns(stub(:full_name => 'student'))
  end
end
