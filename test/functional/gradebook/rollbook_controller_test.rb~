require 'test_helper'

class Gradebook::RollbookControllerTest < ActionController::TestCase

  def setup
    @request.session[:school] = Fixtures.identify(:elementary)
    login_as :Sir
    Section.any_instance.stubs(:belongs_to?).returns(true)
  end

  def test_fail_login
    Gradebook::RollbookController.public_instance_methods(false).each do |method|
      @controller.stubs(:authorized?).returns(false)
      get method.to_sym
      assert_redirected_to login_path
    end
  end

  def test_create
    Section.any_instance.expects(:enroll).returns(true)
    @section = sections(:section)
    post :create, :section_id => @section, :id => users(:unenrolled_student)
    assert_redirected_to new_section_student_url(@section)
  end

  def test_create_fail
    general_prep
    @section.expects(:name).at_least_once.returns('test name')
    @request.session[:return_to] = 'test location'
    post :create, :section_id => 'test', :id => 404
    assert_template('new')
    assert_select 'div#error'
  end

  def test_create_xhr
    general_prep
    @section.expects(:enroll).returns(true)
    School.any_instance.expects(:students).returns(mock(:find_by_id => mock(:full_name => 'student name')))
    xhr :post, :create, :id => 1
    assert_response :success
  end

  def test_create_fail_xhr
    general_prep
    xhr :post, :create
    assert_response :success
  end
  
  def test_destroy
    delete :destroy, :section_id => sections(:section), :id => users(:sam)
    assert assigns(:teacher)
    assert_redirected_to section_path(sections(:section))
  end

  def test_destroy_xhr
    xhr :delete, :destroy, :section_id => sections(:section), :id => users(:sam)
    assert_response :success
  end
  
  def test_index_empty
    prep_index
    get :index, :section_id => 'test'
    assert_response :success
  end

  def test_index
    prep_index
    @assign1, @assign2 = Assignment.new, Assignment.new
    @section.expects(:assignments).at_least_once.returns(stub(:find => [@assign1, @assign2], :size => 2, :maximum => 404, :categories => ['test']))
    @rbe = RollbookEntry.new
    @rbe.expects(:student).at_least_once.returns(Student.new)
    @rbe.expects(:grade_for).at_least_once.returns('filler')
    @section.expects(:rollbook_entries).returns(stub(:find => [@rbe]))
    get :index, :section_id => 'test'
    assert_response :success
  end

  def test_search
    Student.expects(:search).returns([Student.new])
    @request.session[:return_to] = '/back'
    get :search, :section_id => sections(:section)
    assert_template('new')
  end

  def test_show
    prep_mp
    prep_rbe
    @milestone = Milestone.new
    @milestone.stubs(:class_rank).returns(1)
    @rbe.expects(:milestones).returns(stub(:detect => @milestone))
    get :show
    assert_response :success
  end

  def test_sort
    general_prep
    @section.expects(:sort_by)
    post :sort
    assert_redirected_to gradebook_url(@section)
  end

  def test_mass_enroll
    general_prep
    @section.expects(:bulk_enroll).returns(['a student', 'another student'])
    post :create, :names => 'a student\r\nanother student'
    assert_redirected_to new_section_student_path(@section)
  end

  def test_mass_enroll_fails
    general_prep
    @section.expects(:bulk_enroll).returns([])
    post :create, :names => 'nonexistent'
    assert flash[:error]
    assert_redirected_to new_section_student_path(@section)
  end

  def test_mass_enroll_partial_success
    general_prep
    @section.expects(:bulk_enroll).returns(['a student'])
    post :create, :names => "a student\nanother student"
    assert_redirected_to new_section_student_path(@section)
  end
  
  def test_assignments
    prep_rbe
    prep_index
    get :assignments
    assert_response :success
  end

  def test_marks
    prep_rbe
    @rbe.expects(:sort_milestones!).returns([@milestone = Milestone.new])
    @milestone.stubs(:reported_grade).returns(stub(:description => 'mp'))
    get :marks
    assert_response :success
  end

  def test_upload
    general_prep
    Upload.expects(:create).returns(mock(:valid? => true, :extension => '.xlsx'))
    get :upload, :Filedata => 'file.xlsx'
    assert_redirected_to :action => 'describe_file'
  end

  def test_upload_fails
    general_prep
    Upload.expects(:create).returns(@upload = Upload.new)
    get :upload, :Filedata => 'file'
    assert_template('select_file')
  end
  
  def test_describe_file
    general_prep
    Upload.expects(:open).returns(@upload = Upload.new)
    @upload.expects(:valid?).returns(true)
    @upload.stubs(:data).returns([[]])
    @upload.stubs(:extension).returns('.ods')
    get :describe_file
  end

  def test_select_file
    general_prep
    get :select_file
    assert_response :success
  end

  def test_bulk_upload
    general_prep
    EnrollmentUpload.expects(:open).returns(mock(:create_enrollment => stub(:num_inserts => 1)))
    get :import_enrollment, :section => [1,2,'']
    assert_redirected_to sections_path
  end

  def test_bulk_upload_fail
    general_prep
    EnrollmentUpload.expects(:open).returns(@upload = EnrollmentUpload.new)
    @upload.expects(:create_enrollment).returns(nil)
    @upload.stubs(:data).returns([[]])
    @upload.stubs(:extension).returns('.xls')
    get :import_enrollment
    assert_template('describe_file')
  end
  protected
  def prep_index
    general_prep
    @section.expects(:current_marking_period).returns(stub(:reported_grade_id => 1))
    @section.expects(:marking_periods).returns([stub(:position => 1)])
  end

  def general_prep
    @controller.stubs(:current_user).returns(@teacher = Teacher.new(:title => 'Mr', :last_name => 'Test'))
    Section.stubs(:find).returns(@section = Section.new)
    @section.stubs(:teacher).returns(@teacher)
  end

  def prep_rbe
    general_prep
    RollbookEntry.expects(:find).returns(@rbe = RollbookEntry.new)
    @rbe.stubs(:student).returns(Student.new(:first_name => 'test', :last_name => 'student'))
  end
end
